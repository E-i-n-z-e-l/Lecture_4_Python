# Функция map

# Функция map() применяет указанную функцию к каждому элементу
# итерируемого объекта и возвращает итератор с новыми объектами.


# Задача: C клавиатуры вводится некий набор чисел, в качестве разделителя
# используется пробел. Этот набор чисел будет считан в качестве строки. Как
# превратить list строк в list чисел?

# Маленькое отступление, функция строка.split() - убирает все пробелы и создаем
# список из значений строки, пример:

# data = '1 2 3 5 8 15 23 38'.split()
# print(data) # ['1', '2', '3', '5', '8', '15', '23', '38']


# Теперь вернемся к задаче. С помощью функции map():

# data = list(map(int,input().split()))


# Результат работы map() — это итератор. По итератору можно пробежаться только
# один раз. Чтобы работать несколько раз с одними данными, нужно сохранить
# данные (например, в виде списка).

# ПРИМЕР:

some_list = [1, 2, 3, 4, 5]
print(list(map(str, some_list))) # привидет список из чисел к списку строк. Map изменяет все что есть в списке.

#_______________________________________________________________________________________________________________________________________________

# ФУНКЦИЯ lambda
# ПРИМЕР:
some_list = [1, 2, 3, 4, 5]
print(list(map(lambda a: a ** 2, some_list))) # ФУНКЦИЯ lambda это просто укороченная функция, которую можно записать в одну строку



#_______________________________________________________________________________________________________________________________________________
# Функция filter
# Функция filter() применяет указанную функцию к каждому элементу
# итерируемого объекта и возвращает итератор с теми объектами, для которых
# функция вернула True.
some_list_1 = [1, 2, 3, 4, 5]
print(list(filter(lambda x: x % 2 == 0, some_list_1))) # Функция filter просто берет из списка те значения, которые соответсвуют указанным в функции lambda. Но возвращает True или False


#_______________________________________________________________________________________________________________________________________________
# Функция zip
# Функция zip() применяется к набору итерируемых объектов и
# возвращает итератор с кортежами из элементов входных данных
some_list_2 = [1, 2, 3, 4, 5]
some_list_3 = ['1', '2', '3', '4', '5']
print(list(zip(some_list_2, some_list_3))) # Создает кортежи - 0-ой элемент 1 списка и 0-ой элемент 2 списка образуют кортеж.

for i, j in zip(some_list_2, some_list_3): # i - для первого списка, j -  для второго списка. Итераторов может быть больше, если больше списков. Используется для вывода информации.
    print(i, j)
#_______________________________________________________________________________________________________________________________________________
# Функция enumerate
# Функция enumerate() применяется к итерируемому объекту и
# возвращает новый итератор с кортежами из индекса и элементов входных
# данных.

some_list_4 = [1, 2, 3, 4, 5]
print(list(enumerate(some_list_4))) # Показывает индексы и их значения в списке
























